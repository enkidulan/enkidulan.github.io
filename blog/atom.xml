<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://enkidulan.info/</id>
  <title>Enkidulan's blog Blog</title>
  <updated>2023-09-19T00:40:39.501050+00:00</updated>
  <link href="https://enkidulan.info/"/>
  <link href="https://enkidulan.info/blog/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.io/" version="0.11.5">ABlog</generator>
  <entry>
    <id>https://enkidulan.info/posts/old-posts/pytest-dealing-with-halting-tests/</id>
    <title>pytest: dealing with halting tests</title>
    <updated>2021-04-21T00:00:00-07:00</updated>
    <author>
      <name>Maksym Shalenyi</name>
    </author>
    <content type="html">&lt;p class="ablog-post-excerpt"&gt;&lt;p&gt;Besides using  –durations option, which does not seem to show the interrupted halted tests, one possible way to deal with halting tests is to use pytest-timeout. However, it does not work with pytest-xdist, which a large issue when you are refactoring a large codebase with lots of tests and not ready to wait 5x times longer.&lt;/p&gt;
&lt;p&gt;Fortunately, pytest is an excellent rich framework and provides a concept of hooks. And so to deal with this problem it is possible to use pytest_runtest_call hook to write to a file a time when a test started and when it ended. With this, it should be easy to figure out most of the halting tests in one go.&lt;/p&gt;
&lt;/p&gt;
</content>
    <link href="https://enkidulan.info/posts/old-posts/pytest-dealing-with-halting-tests/" rel="alternate"/>
    <summary>Besides using  –durations option, which does not seem to show the interrupted halted tests, one possible way to deal with halting tests is to use pytest-timeout. However, it does not work with pytest-xdist, which a large issue when you are refactoring a large codebase with lots of tests and not ready to wait 5x times longer.Fortunately, pytest is an excellent rich framework and provides a concept of hooks. And so to deal with this problem it is possible to use pytest_runtest_call hook to write to a file a time when a test started and when it ended. With this, it should be easy to figure out most of the halting tests in one go.</summary>
    <category term="pytest" label="pytest"/>
    <category term="python" label="python"/>
    <category term="testing" label="testing"/>
    <published>2021-04-21T00:00:00-07:00</published>
  </entry>
  <entry>
    <id>https://enkidulan.info/posts/old-posts/pdb-driven-development/</id>
    <title>Pdb Driven Development</title>
    <updated>2016-12-02T00:00:00-08:00</updated>
    <author>
      <name>Maksym Shalenyi</name>
    </author>
    <content type="html">&lt;p class="ablog-post-excerpt"&gt;&lt;p&gt;The most important command of pdb module that you should know is set_trace method, it enters the debugger at the calling stack frame at a given point in a program, and so far it’s the only piece of code that you should not be ashamed to copy-paste:&lt;/p&gt;
&lt;p&gt;When you are in debugger there is a set of command that will help you investigate the scope:&lt;/p&gt;
&lt;/p&gt;
</content>
    <link href="https://enkidulan.info/posts/old-posts/pdb-driven-development/" rel="alternate"/>
    <summary>The most important command of pdb module that you should know is set_trace method, it enters the debugger at the calling stack frame at a given point in a program, and so far it’s the only piece of code that you should not be ashamed to copy-paste:When you are in debugger there is a set of command that will help you investigate the scope:</summary>
    <category term="debugging" label="debugging"/>
    <category term="pdb" label="pdb"/>
    <category term="python" label="python"/>
    <published>2016-12-02T00:00:00-08:00</published>
  </entry>
</feed>
