<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://enkidulan.info/</id>
  <title>Enkidulan's blog Blog</title>
  <updated>2025-01-17T00:55:41.852910+00:00</updated>
  <link href="https://enkidulan.info/"/>
  <link href="https://enkidulan.info/blog/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.io/" version="0.11.12">ABlog</generator>
  <entry>
    <id>https://enkidulan.info/posts/easy_diagrams/mvp_design/</id>
    <title>Designing EasyDiagrams MVP</title>
    <updated>2025-01-08T00:00:00-08:00</updated>
    <author>
      <name>Maksym Shalenyi</name>
    </author>
    <content type="html">&lt;p class="ablog-post-excerpt"&gt;&lt;p&gt;I want to share the process I followed to design the MVP for &lt;a class="reference external" href="https://EasyDiagrams.work"&gt;EasyDiagrams.work&lt;/a&gt;, along with the outcome. Each chapter in this document represents a step in my research and design process. The main goal of creating this document before writing any code was to anticipate potential challenges—even those that initially seemed trivial—and to capture the goals, as well as the key decisions about design and architecture.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vocabulary:&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="https://easydiagrams.work/diagrams/jT3oIjGnZhLoSHJlYzOeP8XkRjmdUjmY/image.svg" class="align-center" src="https://easydiagrams.work/diagrams/jT3oIjGnZhLoSHJlYzOeP8XkRjmdUjmY/image.svg" /&gt;&lt;/p&gt;
</content>
    <link href="https://enkidulan.info/posts/easy_diagrams/mvp_design/"/>
    <summary>I want to share the process I followed to design the MVP for EasyDiagrams.work, along with the outcome. Each chapter in this document represents a step in my research and design process. The main goal of creating this document before writing any code was to anticipate potential challenges—even those that initially seemed trivial—and to capture the goals, as well as the key decisions about design and architecture.Vocabulary:</summary>
    <category term="easy_diagrams" label="easy_diagrams"/>
    <category term="plantuml" label="plantuml"/>
    <category term="python" label="python"/>
    <category term="software-design" label="software-design"/>
    <category term="system-design" label="system-design"/>
    <published>2025-01-08T00:00:00-08:00</published>
  </entry>
  <entry>
    <id>https://enkidulan.info/posts/katas/gilded_rose_kata/</id>
    <title>Gilded Rose Refactoring Kata</title>
    <updated>2024-09-27T00:00:00-07:00</updated>
    <author>
      <name>Maksym Shalenyi</name>
    </author>
    <content type="html">&lt;p class="ablog-post-excerpt"&gt;&lt;p&gt;Not too long ago I tried “Gilded Rose Refactoring Kata”. It is an excellent
exercise, and I highly recommend to try it. I’ve also seen many people sharing
great solutions on GitHub and in personal blogs. However, almost all of
the solutions I’ve seen did not reflect the reasoning about “why?” and “how?”.
Why the current code needs to be refactored? How do I want to change code?
How do I want to go about changing code? Why I refactored the code in this
way and not another? So this post is my reflections on the “why?” and “how?”
which I hope you will find useful and/or entertaining.&lt;/p&gt;
&lt;p&gt;The kata and its test is kindly provided by Emily Bache and can be found on
&lt;a class="github reference external" href="https://github.com/emilybache/GildedRose-Refactoring-Kata"&gt;emilybache/GildedRose-Refactoring-Kata&lt;/a&gt;. I highly encourage
to give it a go, as I had a lot of fun working on it. The kata goes like this:&lt;/p&gt;
&lt;/p&gt;
</content>
    <link href="https://enkidulan.info/posts/katas/gilded_rose_kata/"/>
    <summary>Not too long ago I tried “Gilded Rose Refactoring Kata”. It is an excellent
exercise, and I highly recommend to try it. I’ve also seen many people sharing
great solutions on GitHub and in personal blogs. However, almost all of
the solutions I’ve seen did not reflect the reasoning about “why?” and “how?”.
Why the current code needs to be refactored? How do I want to change code?
How do I want to go about changing code? Why I refactored the code in this
way and not another? So this post is my reflections on the “why?” and “how?”
which I hope you will find useful and/or entertaining.The kata and its test is kindly provided by Emily Bache and can be found on
https://github.com/emilybache/GildedRose-Refactoring-Kata. I highly encourage
to give it a go, as I had a lot of fun working on it. The kata goes like this:</summary>
    <category term="blog" label="blog"/>
    <category term="kata" label="kata"/>
    <category term="python" label="python"/>
    <category term="software-design" label="software-design"/>
    <published>2024-09-27T00:00:00-07:00</published>
  </entry>
  <entry>
    <id>https://enkidulan.info/posts/it_has_been_a_while/</id>
    <title>My blog is back</title>
    <updated>2023-09-19T00:00:00-07:00</updated>
    <author>
      <name>Maksym Shalenyi</name>
    </author>
    <content type="html">&lt;p class="ablog-post-excerpt"&gt;&lt;p&gt;It has been a while! But my blog is back and on a new engine!&lt;/p&gt;
&lt;p&gt;After a mishap with a cloud provider, I’m bringing my blog back. This time I’ve decided to try static blog engine, and even more, the one that is based on Sphinx. Thanks to &lt;a class="reference external" href="https://ablog.readthedocs.io/en/stable/"&gt;https://ablog.readthedocs.io/en/stable/&lt;/a&gt; for awesome software.&lt;/p&gt;
&lt;/p&gt;
</content>
    <link href="https://enkidulan.info/posts/it_has_been_a_while/"/>
    <summary>It has been a while! But my blog is back and on a new engine!After a mishap with a cloud provider, I’m bringing my blog back. This time I’ve decided to try static blog engine, and even more, the one that is based on Sphinx. Thanks to https://ablog.readthedocs.io/en/stable/ for awesome software.</summary>
    <category term="blog" label="blog"/>
    <category term="python" label="python"/>
    <published>2023-09-19T00:00:00-07:00</published>
  </entry>
  <entry>
    <id>https://enkidulan.info/posts/old-posts/pytest-dealing-with-halting-tests/</id>
    <title>pytest: dealing with halting tests</title>
    <updated>2021-04-21T00:00:00-07:00</updated>
    <author>
      <name>Maksym Shalenyi</name>
    </author>
    <content type="html">&lt;p class="ablog-post-excerpt"&gt;&lt;p&gt;Besides using  –durations option, which does not seem to show the interrupted halted tests, one possible way to deal with halting tests is to use pytest-timeout. However, it does not work with pytest-xdist, which a large issue when you are refactoring a large codebase with lots of tests and not ready to wait 5x times longer.&lt;/p&gt;
&lt;p&gt;Fortunately, pytest is an excellent rich framework and provides a concept of hooks. And so to deal with this problem it is possible to use pytest_runtest_call hook to write to a file a time when a test started and when it ended. With this, it should be easy to figure out most of the halting tests in one go.&lt;/p&gt;
&lt;/p&gt;
</content>
    <link href="https://enkidulan.info/posts/old-posts/pytest-dealing-with-halting-tests/"/>
    <summary>Besides using  –durations option, which does not seem to show the interrupted halted tests, one possible way to deal with halting tests is to use pytest-timeout. However, it does not work with pytest-xdist, which a large issue when you are refactoring a large codebase with lots of tests and not ready to wait 5x times longer.Fortunately, pytest is an excellent rich framework and provides a concept of hooks. And so to deal with this problem it is possible to use pytest_runtest_call hook to write to a file a time when a test started and when it ended. With this, it should be easy to figure out most of the halting tests in one go.</summary>
    <category term="pytest" label="pytest"/>
    <category term="python" label="python"/>
    <category term="testing" label="testing"/>
    <published>2021-04-21T00:00:00-07:00</published>
  </entry>
  <entry>
    <id>https://enkidulan.info/posts/old-posts/pdb-driven-development/</id>
    <title>Pdb Driven Development</title>
    <updated>2016-12-02T00:00:00-08:00</updated>
    <author>
      <name>Maksym Shalenyi</name>
    </author>
    <content type="html">&lt;p class="ablog-post-excerpt"&gt;&lt;p&gt;The most important command of pdb module that you should know is set_trace method, it enters the debugger at the calling stack frame at a given point in a program, and so far it’s the only piece of code that you should not be ashamed to copy-paste:&lt;/p&gt;
&lt;p&gt;When you are in debugger there is a set of command that will help you investigate the scope:&lt;/p&gt;
&lt;/p&gt;
</content>
    <link href="https://enkidulan.info/posts/old-posts/pdb-driven-development/"/>
    <summary>The most important command of pdb module that you should know is set_trace method, it enters the debugger at the calling stack frame at a given point in a program, and so far it’s the only piece of code that you should not be ashamed to copy-paste:When you are in debugger there is a set of command that will help you investigate the scope:</summary>
    <category term="debugging" label="debugging"/>
    <category term="pdb" label="pdb"/>
    <category term="python" label="python"/>
    <published>2016-12-02T00:00:00-08:00</published>
  </entry>
</feed>
